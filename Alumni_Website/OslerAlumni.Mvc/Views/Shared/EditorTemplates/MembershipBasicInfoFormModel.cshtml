@model MembershipBasicInfoFormModel

@{
    /*Note: this is needed so that html fields aren't
     prefixed if we have nested view models. However,
     it also means that this form may appear only once on the page.*/
    ViewData.TemplateInfo.HtmlFieldPrefix = string.Empty;
}

<div class="c-form-wrapper" data-form="membership-basic-info">

    @using (Html.BeginForm(
        "MembershipUpdateBasicInfo",
        "Membership",
        FormMethod.Post,
        new { @class = "c-form", id = "membership-basic-info" }))
    {
        @Html.AntiForgeryToken()

        @Html.FormErrorSummary()

        @Html.HiddenFor(model => model.UserGuid)

        @Html.StyledEditorFor(
                      model => model.UserName,
                      null,
                      Html.DisplayFor(model => model.UserName, "ReadOnlyString"),
                      new { @class = "word-wrap" })

        @Html.StyledEditorFor(model => model.FirstName)

        @Html.StyledEditorFor(model => model.LastName)

        @Html.StyledEditorFor(model => model.Email)

        @Html.StyledEditorFor(model => model.CompanyName)

        @Html.StyledEditorFor(model => model.JobTitle)

        @Html.StyledEditorFor(model => model.City)

        @Html.StyledEditorFor(model => model.Province)

        @Html.StyledEditorFor(model => model.Country)

        @Html.StyledEditorFor(
                      model => model.LinkedInUrl,
                      null,
                      null,
                      new { @class = "c-form-field-social" })

        @Html.StyledEditorFor(
                      model => model.TwitterUrl,
                      null,
                      null,
                      new { @class = "c-form-field-social" })

        @Html.StyledEditorFor(
                      model => model.InstagramUrl,
                      null,
                      null,
                      new { @class = "c-form-field-social" })

        if (Model.YearOfCallAndJurisdictions?.Any() ?? false)
        {
            @Html.StyledEditorFor(
                          model => model.YearOfCallAndJurisdictions,
                          null,
                          Html.DisplayFor(model => model.YearOfCallAndJurisdictions))
        }
        else
        {
            <div class="c-form-field">
                <div class="c-form-field-wrapper">
                    @Html.LabelFor(model => Model.YearOfCallAndJurisdictions)
                    <p>@(ResHelper.GetString(Constants.ResourceStrings.Form.MembershipBasicInfo.BarAdmissionAndJurisdictionEmpty))</p>
                </div>
            </div>
        }

        <div class="c-form-field">
            <div class="c-form-field-wrapper">
                @Html.LabelFor(model => Model.CurrentIndustry)
                <p>@(!string.IsNullOrWhiteSpace(Model.CurrentIndustry) ? Model.CurrentIndustry : ResHelper.GetString(Constants.ResourceStrings.Form.MembershipBasicInfo.CurrentIndustryEmpty) )</p>
            </div>
        </div>


        if (Model.EducationHistory?.Any() ?? false)
        {
            @Html.StyledEditorFor(
                          model => model.EducationHistory,
                          null,
                          Html.DisplayFor(model => model.EducationHistory, "EducationRecordList"))
        }
        else
        {
            <div class="c-form-field">
                <div class="c-form-field-wrapper">
                    @Html.LabelFor(model => Model.EducationHistory)
                    <p>@(ResHelper.GetString(Constants.ResourceStrings.Form.MembershipBasicInfo.EducationHistoryEmpty))</p>
                </div>
            </div>
        }

        @(Html.Osler()
                              .FormSubmitButton()
                              .WithText(Constants.ResourceStrings.SaveEdits)
                              .ToHtmlString())

        @Html.Partial("_FormServerError")
    }

    @Html.Partial("_OverlayLoader")
</div>
